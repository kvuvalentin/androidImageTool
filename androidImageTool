#!/usr/bin/env ruby

require 'optparse'
require 'RMagick'
require 'fileutils'
include Magick
dpi_hash = {ldpi:24, mdpi:32,hdpi:48, xhdpi:64}
opts_hash = {}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: androidImageTool [options]"
  opts_hash[:width] = nil
  opts.on( '-w', '--width NUM', 'New width of image' ) do |width|
    opts_hash[:width] = width.to_f
  end
  opts_hash[:height] = nil
  opts.on( '-h', '--height NUM', 'New height of image' ) do |height|
    opts_hash[:height] = height.to_f
  end
  opts.on( '--dw NUM', 'Delta width of image cut' ) do |dw|
    opts_hash[:dw] = dw.to_f
  end
  opts.on( '--dh NUM', 'Delta height of image cut' ) do |dh|
    opts_hash[:dh] = dh.to_f
  end
end
optparse.parse!
ARGV.each do |opt|
  puts opt.to_s
end

src = Magick::Image.read(ARGV.at(0).to_s+"/"+ARGV.at(1))[0]
dSide = src.rows.to_f/src.columns.to_f
puts dSide
def default(img, dpi_hash, opts_hash, dSide)
  dpi_hash.each do |path, dpi|
    endPath = ARGV.at(2).to_s+"/"+path.to_s
    unless File.exists? endPath or File.directory? endPath
      FileUtils.mkdir endPath
    end
    img.resize(dpi.to_f, dpi.to_f*dSide.to_f).write(endPath+"/"+ARGV.at(1));
  end
end
def cut(img, opts_hash)
  newWidth = img.columns
  newHeight = img.rows
  unless(opts_hash[:dw].nil?)
    newWidth -=opts_hash[:dw].to_i
  end
  unless(opts_hash[:dh].nil?)
     newHeight -=opts_hash[:dh].to_i
  end
  endPath = opts_hash[:res_path].to_s+"/"+opts_hash[:name].to_s
  img.resize(newWidth, newHeight).write(endPath)
end
default(src, dpi_hash, opts_hash, dSide)