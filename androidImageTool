#!/usr/bin/env ruby

require 'optparse'
require 'RMagick'
require 'fileutils'

include Magick
dpi_hash = {ldpi:24, mdpi:32,hdpi:64, xhdpi:128}
opts_hash = {}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: androidImageTool path filename resources_path [options]"
  opts.on('--cut', 'Cut image') do |cut|
    opts_hash[:cut] = true
  end
  opts.on( '--fill', 'Fill image in size' ) do |dh|
    opts_hash[:fill]=true
  end
  opts.on( '-w', '--width NUM', 'New width of image' ) do |width|
    opts_hash[:width] = width.to_f
    end
  opts.on( '-h', '--height NUM', 'New height of image' ) do |height|
    opts_hash[:height] = height.to_f
  end
  opts.on( '--dw NUM', 'Delta width of image cut' ) do |dw|
    if(opts_hash[:cut])
      opts_hash[:dw] = dw.to_f
    end
  end
  opts.on( '--dh NUM', 'Delta height of image cut' ) do |dh|
    if(opts_hash[:cut])
      opts_hash[:dh] = dh.to_f
    end
  end
  opts.on('--help', 'Show this help') do |help|
    puts opts
    puts "Example:\n androidImageTool ~/images image.jpg ~/projects/MyAndroidProject/res\n"
    exit
  end
end
optparse.parse!
ARGV.each do |opt|
  puts opt.to_s
end
=begin
src = Magick::Image.read(ARGV.at(0).to_s+"/"+ARGV.at(1))[0]
=end
files = Dir[ARGV.at(0)]
src = ImageList.new
files.each do |file|
  puts file
  f = File.open file
  blob = f.read
  src.from_blob blob
end
puts src
def default(img, dpi_hash)
  dpi_hash.each do |path, dpi|
    endPath = ARGV.at(2).to_s+path.to_s
    unless File.exists? endPath
      FileUtils.mkdir endPath
    end
    img.resize_to_fit(dpi.to_f, 0).write(endPath);
  end
end
def cut(img, opts_hash)
  newWidth = img.columns
  newHeight = img.rows
  unless(opts_hash[:dw].nil?)
    newWidth -=opts_hash[:dw].to_i
  end
  unless(opts_hash[:dh].nil?)
     newHeight -=opts_hash[:dh].to_i
  end
  endPath = opts_hash[:res_path].to_s+"/"+opts_hash[:name].to_s
  img.resize(newWidth, newHeight).write(endPath)
end
def fit(img, opts_hash)
  endPath = endPath = ARGV.at(2).to_s+"/"+ARGV.at(1)
  img.resize_to_fit(opts_hash[:width], opts_hash[:height]).write(endPath)
end
if(opts_hash.length==0)
  default(src, dpi_hash)
elsif(opts_hash[:cut])
  cut(src, opts_hash)
elsif(opts_hash[:fill])
  fit(src, opts_hash)
end