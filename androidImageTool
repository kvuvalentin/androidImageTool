#!/usr/bin/env ruby

require 'optparse'
require 'RMagick'
require 'fileutils'
require 'pathname'

include Magick
dpi_hash = {ldpi:24, mdpi:32,hdpi:64, xhdpi:128}
opts_hash = {}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: androidImageTool path filename resources_path [options]"
  opts.on('--cut', 'Cut image') do |cut|
    opts_hash[:cut] = true
  end
  opts.on( '--fill', 'Fill image in size' ) do |dh|
    opts_hash[:fill]=true
  end
  opts.on( '-w', '--width NUM', 'New width of image' ) do |width|
    opts_hash[:width] = width.to_f
    end
  opts.on( '-h', '--height NUM', 'New height of image' ) do |height|
    opts_hash[:height] = height.to_f
    end
  opts.on( '-v', '--verbose', 'Verbose mode' ) do |verbose|
    opts_hash[:verbose] = verbose
  end
  opts.on( '--dw NUM', 'Delta width of image cut' ) do |dw|
    if(opts_hash[:cut])
      opts_hash[:dw] = dw.to_f
    end
  end
  opts.on( '--dh NUM', 'Delta height of image cut' ) do |dh|
    if(opts_hash[:cut])
      opts_hash[:dh] = dh.to_f
    end
  end
  opts.on('--help', 'Show this help') do |help|
    puts opts
    puts "Example:\n androidImageTool ~/images image.jpg ~/projects/MyAndroidProject/res\n"
    exit
  end
end
optparse.parse!
if(ARGV.empty?)
  exit
end
=begin
src = Magick::Image.read(ARGV.at(0).to_s+"/"+ARGV.at(1))[0]
=end
if(opts_hash[:verbose])
  puts "Create images..."
end
src = ImageList.new
ARGV.each do |file|
  if(ARGV.index(file)<ARGV.index(ARGV.last))
    if(opts_hash[:verbose])
      puts file
    end
    f = File.open file
    blob = f.read
    src.from_blob blob
    puts file
    puts src.inspect
  end
end

=begin
def default(img, dpi_hash, file, opts_hash)
  dpi_hash.each do |path, dpi|
    folder = ARGV.last.to_s+"/"+path.to_s
    endPath = folder+"/"+File.basename(file).to_s
    unless File.exists? folder or File.directory? folder
      if opts_hash[:verbose]
         puts "Creating directory "+folder
      end
      FileUtils.mkdir folder
    end
    if(opts_hash[:verbose])
       puts "Write image to file "+endPath
    end
    img.resize_to_fit(dpi.to_f, 0).write(endPath);
  end
end
def cut(img, opts_hash, file)
  newWidth = img.columns
  newHeight = img.rows
  unless(opts_hash[:dw].nil?)
    newWidth -=opts_hash[:dw].to_i
  end
  unless(opts_hash[:dh].nil?)
     newHeight -=opts_hash[:dh].to_i
  end
  endPath = ARGV.at(2).to_s+"/"+File.basename(file).to_s
  img.resize_to_fill(newWidth, newHeight).write(endPath)
end
def fill(img, opts_hash, file)
  endPath = endPath = ARGV.at(2).to_s+"/"+File.basename(file).to_s
  img.resize_to_fill(opts_hash[:width], opts_hash[:height]).write(endPath)
end
ARGV.each do |file|
  unless(ARGV.index(file).to_i==ARGV.length-1)
    if(opts_hash.length==0)
      default(src, dpi_hash, file, opts_hash)
    elsif(opts_hash[:verbose])
      default(src, dpi_hash, file, opts_hash)
    elsif(opts_hash[:cut])
      cut(src, opts_hash, file)
    elsif(opts_hash[:fill])
      fill(src, opts_hash, file)
    end
  end
end=end
