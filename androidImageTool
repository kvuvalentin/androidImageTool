#!/usr/bin/env ruby

require 'optparse'
require 'RMagick'
require 'fileutils'
require 'pathname'

include Magick
dpi_hash = {ldpi:24, mdpi:32,hdpi:64, xhdpi:128}
opts_hash = {}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: androidImageTool path filename resources_path [options]"
  opts.on('--cut', 'Cut image') do |cut|
    opts_hash[:cut] = true
  end
  opts.on( '--fill', 'Fill image in size' ) do |dh|
    opts_hash[:fill]=true
  end
  opts.on( '-w', '--width NUM', 'New width of image' ) do |width|
    opts_hash[:width] = width.to_f
    end
  opts.on( '-h', '--height NUM', 'New height of image' ) do |height|
    opts_hash[:height] = height.to_f
    end
  opts.on( '-v', '--verbose', 'Verbose mode' ) do |verbose|
    opts_hash[:verbose] = verbose
  end
  opts.on( '--dw NUM', 'Delta width of image cut' ) do |dw|
    if(opts_hash[:cut])
      opts_hash[:dw] = dw.to_f
    end
  end
  opts.on( '--dh NUM', 'Delta height of image cut' ) do |dh|
    if(opts_hash[:cut])
      opts_hash[:dh] = dh.to_f
    end
  end
  opts.on('--help', 'Show this help') do |help|
    puts opts
    puts "Example:\n androidImageTool ~/images image.jpg ~/projects/MyAndroidProject/res\n"
    exit
  end
end
optparse.parse!
if(ARGV.empty?)
  exit
end

=begin
src = Magick::Image.read(ARGV.at(0).to_s+"/"+ARGV.at(1))[0]
=end
if(opts_hash[:verbose])
  puts "Create images..."
end
src = ImageList.new
ARGV.each do |file|
  if(ARGV.index(file)<ARGV.index(ARGV.last))
    if(opts_hash[:verbose])
      puts file
    end
    f = File.open file
    blob = f.read
    src.from_blob blob
    puts file
    puts src.inspect
  end
end
def default(imageList, dpi_hash, opts_hash)
  files = ARGV.clone
  files.pop
  i = files.length-1
  images = imageList.to_a
  images.each do |img|
     dpi_hash.each do |key, value|
       folder = ARGV.last+"/"+key.to_s
       unless File.exists? folder or File.directory? folder
         if opts_hash[:verbose]
           puts "Creating directory "+folder
         end
         FileUtils.mkdir folder
       end
       tmp = img.resize_to_fit(value, value)
       puts tmp.inspect
       puts files[i].to_s
       tmp.write(folder.to_s+"/"+File.basename(files[i].to_s))
     end
    i-=1
  end
end
default(src, dpi_hash, opts_hash)